#include<stdio.h>
#include<winsock2.h>//biblioteca para sockets
#define BUFLEN 2048//caracteres
int main(int argc , char *argv[])
{
WSADATA winsock;//recebe valor de inicialização e criação de socket
SOCKET server_socket, client_socket;//recebe valor de inicialização e criação de socket
struct sockaddr_in servidor, cliente;// sockaddr_in= inf no servidor(endereço escutados e pots)
int tam, rec_size, send_size;
int num1, num2;
int*message;//mensagem enviada (alterada)
int recvbuf;//caracteres de client de servidor
int recvbuflen = BUFLEN;//recebe dados
printf("\nIniciando Winsock...\n");
if (WSAStartup(MAKEWORD(2,2),&winsock) != 0)//WSAStartup DLL para iniciara  biblioteca, MAKEWORD versao 2 do socket(2,2)= versão do socket e end da variavel
{//retorna 0 quando tem sucesso e -1 quando tem erro
printf("A inicializaçao falhou, codigo do erro: %d\n",WSAGetLastError());
return 1;
}
printf("Winsock Iniciado.\n");
if((server_socket = socket(AF_INET , SOCK_STREAM , 0 )) == INVALID_SOCKET)//socket( familia, tipo de protocolo, 0)
{//0 inicializado e 1 nao inicializado
printf("Erro ao criar o socket: %d\n" , WSAGetLastError());
return 1;
}
printf("Socket criado.\n");
servidor.sin_addr.s_addr = INADDR_ANY; // em todos endereços IPs do host
servidor.sin_family = AF_INET;
servidor.sin_port = htons( 8080 );
if( bind(server_socket ,(struct sockaddr *)&servidor , sizeof(servidor)) ==SOCKET_ERROR)//bind= cria socket e instrui qual porta a camada de transporte deve escutar, sockaddr aponta para o  endereço da estrutura
{//
printf("A ligacao ao socket falhou, codigo de erro: %d" , WSAGetLastError());
}
puts("Ligacao ao socket feita!");
//escutando por conexões
listen(server_socket , 3);//conexões na fila
puts("Esperando por conexoes...");
tam = sizeof(struct sockaddr_in);
while( (client_socket = accept(server_socket , (struct sockaddr *)&cliente,
&tam)) != INVALID_SOCKET )
{
printf("Conexao aceita. IP cliente: %s - porta%d\n",inet_ntoa(cliente.sin_addr),ntohs(cliente.sin_port));
//enviar resposta para o cliente
printf("digite um numero\n");
scanf("%d",&num1);
printf("digite outro numero\n");
scanf("%d",&num2);
message =num1;
if (send(client_socket , message , strlen(message) , 0)>0) {
puts("Boas vindas enviada!");
}
do {//antes de digitar

if (rec_size > 0) {
printf("Bytes recebidos: %d\n", rec_size);
send_size = send( client_socket, recvbuf, rec_size, 0 );
if (send_size == SOCKET_ERROR) {//envia mensagem
printf("Falha ao enviar, codigo de erro: %d\n",WSAGetLastError());
closesocket(client_socket);
WSACleanup();
return 1;
}
printf("Bytes enviados: %d\n", send_size);//bytes enviados pr cliente
}
else if (rec_size == 0)
printf("Conexao Fechada...\n");
else {
printf("Falha ao receber, codigo de erro: %d\n",
WSAGetLastError());
closesocket(client_socket);//encerra socket do cliente, quando cliente fecha janela do putty
WSACleanup();
return 1;
}
} while (rec_size > 0);
puts("Esperando por conexoes...");
}
closesocket(server_socket);
WSACleanup();
return 0;
}
